# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Xinwei Liu
# This file is distributed under the same license as the xinetzone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: xinetzone 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-01 02:27+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

msgid "草稿"
msgstr ""

msgid "This is a bulleted list."
msgstr ""

msgid "It has two items, the second item uses two lines."
msgstr ""

msgid "This is a numbered list."
msgstr ""

msgid "It has two items too."
msgstr ""

msgid "this is"
msgstr ""

msgid "a list"
msgstr ""

msgid "with a nested list"
msgstr ""

msgid "and some subitems"
msgstr ""

msgid "and here the parent list continues"
msgstr ""

msgid "term (up to a line of text)"
msgstr ""

msgid "Definition of the term, which must be indented"
msgstr ""

msgid "and can even consist of multiple paragraphs"
msgstr ""

msgid "next term"
msgstr ""

msgid "Description"
msgstr ""

msgid "草稿2"
msgstr ""

msgid "Take it away, Eric the Orchestra Leader!"
msgstr ""

msgid "A one, two, a one two three four"
msgstr ""

msgid "Half a bee, philosophically,"
msgstr ""

msgid "must, *ipso facto*, half not be."
msgstr ""

msgid "But half the bee has got to be,"
msgstr ""

msgid "*vis a vis* its entity.  D'you see?"
msgstr ""

msgid "But can a bee be said to be"
msgstr ""

msgid "or not to be an entire bee,"
msgstr ""

msgid "when half the bee is not a bee,"
msgstr ""

msgid "due to some ancient injury?"
msgstr ""

msgid "Singing..."
msgstr ""

msgid "This is a normal text paragraph. The next paragraph is a code sample::"
msgstr ""

msgid "This is a normal text paragraph again."
msgstr ""

msgid "就会反馈 还不简单 很简单 就 火炬计划"
msgstr ""

msgid ""
"This function installs a `handler` for every signal known by the "
"`signalww` module.  See the section `about-signals` for more information."
msgstr ""

msgid "ABlog 简介"
msgstr ""

msgid "ABlog 是一个 Sphinx 插件，可以将任何文档或个人网站项目转换为一个成熟的博客。"
msgstr ""

msgid "具有："
msgstr ""

msgid ":ablog:`Atom feeds <blog/atom.xml>`"
msgstr ""

msgid ":ablog:`档案页 <blog/archive.html>`"
msgstr ""

msgid ":ablog:`博客侧边栏 <manual/ablog-configuration-options.html#blog-sidebars>`"
msgstr ""

msgid ""
":ablog:`Disqus 集成<manual/ablog-configuration-options.html#disqus-"
"integration>`"
msgstr ""

msgid ":ablog:`Font-Awesome 集成 <manual/ablog-configuration-options.html#fa>`"
msgstr ""

msgid ":ablog:`Markdown 支持 <manual/markdown.html>`"
msgstr ""

msgid ""
"详细信息见：:ablog:`ABlog 文档 <#>` 与 :ablog:`ABlog 配置选项 <manual/ablog-"
"configuration-options.html>`。"
msgstr ""

msgid "博客"
msgstr ""

msgid "本页将由 ABlog 取代。它在这里是为了确保它在 TOC 中的位置。"
msgstr ""

msgid "以下是最近的帖子列表："
msgstr ""

msgid "更多信息见：:ref:`about`。"
msgstr ""

#~ msgid "ABlog 是一个 Sphinx 插件，可以将任何文档或个人网站项目转换为一个成熟的博客，具有："
#~ msgstr ""

#~ msgid "详细信息见：:ablog:`ABlog 文档 <#>`。"
#~ msgstr ""

#~ msgid "Sphinx"
#~ msgstr ""

#~ msgid "\"打开 *命令提示符* （:kbd:`⊞Win-r` 并输入 :command:`cmd`）并运行相同的命令。\""
#~ msgstr ""

#~ msgid ""
#~ "Sphinx 的主要目标之一是在任何 :term:`域` 中轻松记录 :term:`对象`"
#~ " （在一个非常普遍的意义上）。 一个域是属于一起的对象类型的集合，有完整的标记来创建和引用这些对象的描述。"
#~ msgstr ""

#~ msgid ""
#~ "For a great \"introduction\" to writing"
#~ " docs in general -- the whys "
#~ "and hows, see also `Write the "
#~ "docs`__, written by Eric Holscher."
#~ msgstr ""

#~ msgid ":program:`sphinx-quickstart`"
#~ msgstr ""

#~ msgid ":rst:role:`ref`"
#~ msgstr ""

#~ msgid "待处理"
#~ msgstr ""

#~ msgid "待更新"
#~ msgstr ""

#~ msgid ":option:`-b <sphinx-build -b>`"
#~ msgstr ""

#~ msgid "|more| 符号"
#~ msgstr ""

#~ msgid "more info"
#~ msgstr ""

#~ msgid ":file:`make.bat`"
#~ msgstr ""

#~ msgid ":command:`make`"
#~ msgstr ""

#~ msgid ":rst:dir:`py:class`"
#~ msgstr ""

#~ msgid ":rst:dir:`py:method`"
#~ msgstr ""

#~ msgid ""
#~ "Return an iterator that yields tuples"
#~ " of an index and an item of "
#~ "the *sequence*. (And so on.)"
#~ msgstr ""

#~ msgid ":func:`enumerate`"
#~ msgstr ""

#~ msgid ":confval:`extensions`"
#~ msgstr ""

#~ msgid ":py:data:`sys.path`"
#~ msgstr ""

#~ msgid "Footnotes"
#~ msgstr ""

#~ msgid ""
#~ "The most important option: it selects"
#~ " a builder.  The most common builders"
#~ " are:"
#~ msgstr ""

#~ msgid "**html**"
#~ msgstr ""

#~ msgid "Build HTML pages.  This is the default builder."
#~ msgstr ""

#~ msgid "Open file and return a stream.  Raise OSError upon failure."
#~ msgstr ""

#~ msgid ""
#~ "file is either a text or byte "
#~ "string giving the name (and the "
#~ "path if the file isn't in the "
#~ "current working directory) of the file"
#~ " to be opened or an integer "
#~ "file descriptor of the file to be"
#~ " wrapped. (If a file descriptor is"
#~ " given, it is closed when the "
#~ "returned I/O object is closed, unless"
#~ " closefd is set to False.)"
#~ msgstr ""

#~ msgid ""
#~ "mode is an optional string that "
#~ "specifies the mode in which the "
#~ "file is opened. It defaults to 'r'"
#~ " which means open for reading in "
#~ "text mode.  Other common values are "
#~ "'w' for writing (truncating the file "
#~ "if it already exists), 'x' for "
#~ "creating and writing to a new "
#~ "file, and 'a' for appending (which "
#~ "on some Unix systems, means that "
#~ "all writes append to the end of"
#~ " the file regardless of the current"
#~ " seek position). In text mode, if "
#~ "encoding is not specified the encoding"
#~ " used is platform dependent: "
#~ "locale.getpreferredencoding(False) is called to "
#~ "get the current locale encoding. (For"
#~ " reading and writing raw bytes use"
#~ " binary mode and leave encoding "
#~ "unspecified.) The available modes are:"
#~ msgstr ""

#~ msgid "Character"
#~ msgstr ""

#~ msgid "Meaning"
#~ msgstr ""

#~ msgid "'r'"
#~ msgstr ""

#~ msgid "open for reading (default)"
#~ msgstr ""

#~ msgid "'w'"
#~ msgstr ""

#~ msgid "open for writing, truncating the file first"
#~ msgstr ""

#~ msgid "'x'"
#~ msgstr ""

#~ msgid "create a new file and open it for writing"
#~ msgstr ""

#~ msgid "'a'"
#~ msgstr ""

#~ msgid "open for writing, appending to the end of the file if it exists"
#~ msgstr ""

#~ msgid "'b'"
#~ msgstr ""

#~ msgid "binary mode"
#~ msgstr ""

#~ msgid "'t'"
#~ msgstr ""

#~ msgid "text mode (default)"
#~ msgstr ""

#~ msgid "'+'"
#~ msgstr ""

#~ msgid "open a disk file for updating (reading and writing)"
#~ msgstr ""

#~ msgid "'U'"
#~ msgstr ""

#~ msgid "universal newline mode (deprecated)"
#~ msgstr ""

#~ msgid ""
#~ "The default mode is 'rt' (open for"
#~ " reading text). For binary random "
#~ "access, the mode 'w+b' opens and "
#~ "truncates the file to 0 bytes, "
#~ "while 'r+b' opens the file without "
#~ "truncation. The 'x' mode implies 'w' "
#~ "and raises an `FileExistsError` if the"
#~ " file already exists."
#~ msgstr ""

#~ msgid ""
#~ "Python distinguishes between files opened "
#~ "in binary and text modes, even "
#~ "when the underlying operating system "
#~ "doesn't. Files opened in binary mode "
#~ "(appending 'b' to the mode argument) "
#~ "return contents as bytes objects without"
#~ " any decoding. In text mode (the "
#~ "default, or when 't' is appended "
#~ "to the mode argument), the contents "
#~ "of the file are returned as "
#~ "strings, the bytes having been first "
#~ "decoded using a platform-dependent "
#~ "encoding or using the specified encoding"
#~ " if given."
#~ msgstr ""

#~ msgid ""
#~ "'U' mode is deprecated and will "
#~ "raise an exception in future versions"
#~ " of Python.  It has no effect "
#~ "in Python 3.  Use newline to "
#~ "control universal newlines mode."
#~ msgstr ""

#~ msgid ""
#~ "buffering is an optional integer used"
#~ " to set the buffering policy. Pass"
#~ " 0 to switch buffering off (only "
#~ "allowed in binary mode), 1 to "
#~ "select line buffering (only usable in"
#~ " text mode), and an integer > 1"
#~ " to indicate the size of a "
#~ "fixed-size chunk buffer.  When no "
#~ "buffering argument is given, the default"
#~ " buffering policy works as follows:"
#~ msgstr ""

#~ msgid ""
#~ "Binary files are buffered in fixed-"
#~ "size chunks; the size of the "
#~ "buffer is chosen using a heuristic "
#~ "trying to determine the underlying "
#~ "device's \"block size\" and falling back"
#~ " on `io.DEFAULT_BUFFER_SIZE`. On many "
#~ "systems, the buffer will typically be"
#~ " 4096 or 8192 bytes long."
#~ msgstr ""

#~ msgid ""
#~ "\"Interactive\" text files (files for "
#~ "which isatty() returns True) use line"
#~ " buffering.  Other text files use the"
#~ " policy described above for binary "
#~ "files."
#~ msgstr ""

#~ msgid ""
#~ "encoding is the name of the "
#~ "encoding used to decode or encode "
#~ "the file. This should only be used"
#~ " in text mode. The default encoding"
#~ " is platform dependent, but any "
#~ "encoding supported by Python can be "
#~ "passed.  See the codecs module for "
#~ "the list of supported encodings."
#~ msgstr ""

#~ msgid ""
#~ "errors is an optional string that "
#~ "specifies how encoding errors are to "
#~ "be handled---this argument should not"
#~ " be used in binary mode. Pass "
#~ "'strict' to raise a ValueError exception"
#~ " if there is an encoding error "
#~ "(the default of None has the same"
#~ " effect), or pass 'ignore' to ignore"
#~ " errors. (Note that ignoring encoding "
#~ "errors can lead to data loss.) See"
#~ " the documentation for codecs.register or"
#~ " run 'help(codecs.Codec)' for a list "
#~ "of the permitted encoding error strings."
#~ msgstr ""

#~ msgid ""
#~ "newline controls how universal newlines "
#~ "works (it only applies to text "
#~ "mode). It can be None, '', '\\n',"
#~ " '\\r', and '\\r\\n'.  It works as"
#~ " follows:"
#~ msgstr ""

#~ msgid ""
#~ "On input, if newline is None, "
#~ "universal newlines mode is enabled. "
#~ "Lines in the input can end in "
#~ "'\\n', '\\r', or '\\r\\n', and these "
#~ "are translated into '\\n' before being"
#~ " returned to the caller. If it "
#~ "is '', universal newline mode is "
#~ "enabled, but line endings are returned"
#~ " to the caller untranslated. If it"
#~ " has any of the other legal "
#~ "values, input lines are only terminated"
#~ " by the given string, and the "
#~ "line ending is returned to the "
#~ "caller untranslated."
#~ msgstr ""

#~ msgid ""
#~ "On output, if newline is None, any"
#~ " '\\n' characters written are translated"
#~ " to the system default line "
#~ "separator, os.linesep. If newline is ''"
#~ " or '\\n', no translation takes "
#~ "place. If newline is any of the"
#~ " other legal values, any '\\n' "
#~ "characters written are translated to the"
#~ " given string."
#~ msgstr ""

#~ msgid ""
#~ "If closefd is False, the underlying "
#~ "file descriptor will be kept open "
#~ "when the file is closed. This does"
#~ " not work when a file name is"
#~ " given and must be True in that"
#~ " case."
#~ msgstr ""

#~ msgid ""
#~ "A custom opener can be used by "
#~ "passing a callable as *opener*. The "
#~ "underlying file descriptor for the file"
#~ " object is then obtained by calling"
#~ " *opener* with (*file*, *flags*). *opener*"
#~ " must return an open file descriptor"
#~ " (passing os.open as *opener* results "
#~ "in functionality similar to passing "
#~ "None)."
#~ msgstr ""

#~ msgid ""
#~ "open() returns a file object whose "
#~ "type depends on the mode, and "
#~ "through which the standard file "
#~ "operations such as reading and writing"
#~ " are performed. When open() is used"
#~ " to open a file in a text "
#~ "mode ('w', 'r', 'wt', 'rt', etc.), "
#~ "it returns a TextIOWrapper. When used"
#~ " to open a file in a binary "
#~ "mode, the returned class varies: in "
#~ "read binary mode, it returns a "
#~ "BufferedReader; in write binary and "
#~ "append binary modes, it returns a "
#~ "BufferedWriter, and in read/write mode, "
#~ "it returns a BufferedRandom."
#~ msgstr ""

#~ msgid ""
#~ "It is also possible to use a "
#~ "string or bytearray as a file for"
#~ " both reading and writing. For "
#~ "strings StringIO can be used like "
#~ "a file opened in a text mode, "
#~ "and for bytes a BytesIO can be "
#~ "used like a file opened in a "
#~ "binary mode."
#~ msgstr ""

